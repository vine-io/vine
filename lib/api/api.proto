// Copyright 2023 lack
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// This file was autogenerated by goproto-gen. Do not edit it manually!

syntax = 'proto3';

package api;

import "github.com/vine-io/vine/core/registry/registry.proto";

// Package-wide variables from generator "generated".
option go_package = "github.com/vine-io/vine/lib/api";

// Endpoint is a mapping between an RPC method and HTTP endpoint
message Endpoint {
  // RPC Method e.g. Greeter.Hello
  string name = 1;

  // Description e.g what's this endpoint for
  string description = 2;

  // API Handler e.g rpc, proxy
  string handler = 3;

  // HTTP Host e.g example.com
  repeated string host = 4;

  // HTTP Methods e.g GET, POST
  repeated string method = 5;

  // HTTP Path e.g /greeter. Expect POSIX regex
  repeated string path = 6;

  // Entity HTTP method for resource
  string entity = 7;

  // Security HTTP authorization, e.g. Basic, Bearer
  string security = 8;

  // Body destination
  // "*" or "" - top level message value
  // "string" - inner message value
  string body = 9;

  // Stream flag
  string stream = 10;
}

// Event A HTTP event as RPC
// Forwarded by the event handler
message Event {
  // e.g login
  string name = 1;

  // uuid
  string id = 2;

  // unix timestamp of event
  int64 timestamp = 3;

  // event headers
  map<string, Pair> header = 4;

  // the event data
  string data = 5;
}

message FileDesc {
  // 文件名称
  string name = 1;

  // 读取偏离量
  int64 offset = 2;
}

message FileHeader {
  string name = 1;

  int64 size = 2;

  int64 length = 3;

  bytes chunk = 4;
}

message Pair {
  string key = 1;

  repeated string values = 2;
}

// Request A HTTP request as RPC
// Forward by the api handler
// +gogo:genproto=true
message Request {
  string method = 1;

  string path = 2;

  map<string, Pair> header = 3;

  map<string, Pair> get = 4;

  map<string, Pair> post = 5;

  string body = 6;

  string url = 7;
}

// Response A HTTP response as RPC
// Expected response for the api handler
message Response {
  int32 statusCode = 1;

  map<string, Pair> header = 2;

  string body = 3;
}

// Service represents an API service
message Service {
  // Name of service
  string name = 1;

  // The endpoint for this service
  Endpoint endpoint = 2;

  // Versions of this service
  repeated registry.Service services = 3;
}

