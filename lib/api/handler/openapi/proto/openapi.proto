syntax = "proto3";

package openapi;

option go_package = "github.com/vine-io/vine/lib/api/handler/openapi/proto;openapi";

import "github.com/vine-io/vine/lib/api/api.proto";

service OpenAPIService {
  rpc GetOpenAPIDoc (GetOpenAPIDocRequest) returns (GetOpenAPIDocResponse);
  rpc GetEndpoint(GetEndpointRequest) returns (GetEndpointResponse);
}

message GetOpenAPIDocRequest {}

message GetOpenAPIDocResponse {
  repeated OpenAPI apis = 1;
}

message GetEndpointRequest {
  string name = 1;
}

message GetEndpointResponse {
  map<string, api.Endpoint> endpoints = 1;
}

message OpenAPI {
  string openapi = 1;
  OpenAPIInfo info = 2;
  OpenAPIExternalDocs externalDocs = 3;
  repeated OpenAPIServer servers = 4;
  repeated OpenAPITag tags = 5;
  map<string, OpenAPIPath> paths = 6;
  OpenAPIComponents components = 7;
}

message OpenAPIServer {
  string url = 1;
  string Description = 2;
}

message OpenAPIInfo {
  string title = 1;
  string description = 2;
  string termsOfService = 3;
  OpenAPIContact contact = 4;
  OpenAPILicense license = 5;
  string version = 6;
}

message OpenAPIContact {
  string name = 1;
  string email = 2;
}

message OpenAPILicense {
  string name = 1;
  string url = 2;
}

message OpenAPITag {
  string name = 1;
  string description = 2;
  OpenAPIExternalDocs externalDocs = 3;
}

message OpenAPIExternalDocs {
  string description = 1;
  string url = 2;
}

message OpenAPIPath {
  OpenAPIPathDocs get = 1;
  OpenAPIPathDocs post = 2;
  OpenAPIPathDocs put = 3;
  OpenAPIPathDocs patch = 4;
  OpenAPIPathDocs delete = 5;
}

message OpenAPIPathDocs {
  repeated string tags = 1;
  string summary = 2;
  string description = 3;
  string operationId = 4;
  bool deprecated = 5;
  PathRequestBody requestBody = 6;
  repeated PathParameters parameters = 7;
  map<string, PathResponse> responses = 8;
  repeated PathSecurity security = 9;
}

message PathSecurity {
  repeated string basic = 1;
  repeated string apiKeys = 2;
  repeated string bearer = 3;
}

message PathParameters {
  // query, cookie, path
  string in = 1;
  string name = 2;
  bool required = 3;
  string description = 4;
  bool allowReserved = 5;
  string style = 6;
  bool explode = 7;
  bool allowEmptyValue = 8;
  Schema schema = 9;
  string example = 10;
}

message PathRequestBody {
  string description = 1;
  bool required = 2;
  PathRequestBodyContent content = 3;
}

message PathRequestBodyContent {
  ApplicationContent applicationJson = 1;
  ApplicationContent applicationXml = 2;
  ApplicationContent applicationYaml = 3;
}

message ApplicationContent {
  Schema schema = 1;
}

// PathResponse is swagger path response
message PathResponse {
  string description = 1;
  PathRequestBodyContent content = 2;
}

message OpenAPIComponents {
  SecuritySchemes securitySchemes = 1;
  map<string, Model> schemas = 2;
}

message SecuritySchemes {
  BasicSecurity basic = 1;
  APIKeysSecurity apiKeys = 2;
  BearerSecurity bearer = 3;
}

// BasicSecurity is swagger Basic Authorization security (https://swagger.io/docs/specification/authentication/basic-authentication/)
message BasicSecurity {
  // http, apiKey, oauth, openIdConnect
  string type = 1;
  string scheme = 2;
}

// APIKeysSecurity is swagger API keys Authorization security (https://swagger.io/docs/specification/authentication/api-keys/)
message APIKeysSecurity {
  string type = 1;
  // header
  string in = 2;
  string name = 3;
}

// BearerSecurity is swagger Bearer Authorization security (https://swagger.io/docs/specification/authentication/bearer-authentication/)
message BearerSecurity {
  // http
  string type = 1;
  string scheme = 2;
  // JWT
  string bearerFormat = 3;
}

// Model is swagger data models (https://swagger.io/docs/specification/data-models/)
message Model {
  // string, number, integer, boolean, array, object
  string type = 1;
  map<string, Schema> properties = 2;
  repeated string required = 3;
}

message Schema {
  string type = 1;
  string format = 2;
  string description = 3;
  string example = 4;
  string pattern = 5;
  bool nullable = 6;
  bool readOnly = 7;
  bool writeOnly = 8;
  bool required = 9;
  string ref = 10;
  string default = 11;

  int32 minLength = 20;
  int32 maxLength = 21;

  int32 multipleOf = 30;
  int32 minimum = 31;
  bool exclusiveMinimum = 32;
  int32 maximum = 33;
  bool exclusiveMaximum = 34;

  repeated string enum = 41;
  Schema items = 42;

  repeated PathParameters parameters = 51;

  Schema additionalProperties = 60;
}
