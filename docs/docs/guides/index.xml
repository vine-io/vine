<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vine – 用户指南</title>
    <link>https://vine-io.github.io/vine/docs/guides/</link>
    <description>Recent content in 用户指南 on Vine</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 29 Dec 2020 15:04:24 +0800</lastBuildDate>
    
	  <atom:link href="https://vine-io.github.io/vine/docs/guides/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Protobuf 规范</title>
      <link>https://vine-io.github.io/vine/docs/guides/protobuf/</link>
      <pubDate>Fri, 27 Aug 2021 09:35:18 +0800</pubDate>
      
      <guid>https://vine-io.github.io/vine/docs/guides/protobuf/</guid>
      <description>
        
        
        &lt;p&gt;我们提供一套 &lt;code&gt;Protobuf&lt;/code&gt; 文件格式和神生成代码的规范，帮助用户写出更标准的接口。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Vine&lt;/strong&gt; 项目的推崇以 &lt;strong&gt;资源&lt;/strong&gt; 为核心。接口的设计和代码的规范都按照 &lt;strong&gt;资源&lt;/strong&gt; 展开。每个接口的设计遵循以下的规则:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;根据需求确定资源 (领域模型)。&lt;/li&gt;
&lt;li&gt;每个接口实际为资源的方法或者是针对资源的操作。&lt;/li&gt;
&lt;li&gt;每个 service 为资源操作的集合。&lt;/li&gt;
&lt;li&gt;前端请求时提交的数据可直接转化为资源的内部属性。&lt;/li&gt;
&lt;li&gt;提供的 API 接口格式统一为针对资源的曹组。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;目录结构&#34;&gt;目录结构&lt;/h2&gt;
&lt;p&gt;API 接口统一存放在 api 目录下，proto 文件同时转化为 gRPC 和 HTTP 两种接口。&lt;/p&gt;
&lt;p&gt;项目中定义 Proto，以 api 为根目录。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;├── service    
│   └── helloworld
│       └── v1
│           ├── helloworld.pb.go
│           ├── helloworld.pb.validator.go
│           ├── helloworld.pb.vine.go
│           └── helloworld.proto
└── types
    └── core
        └── v1
            ├── core.pb.dao.go
            ├── core.pb.deepcopy.go
            ├── core.pb.go
            ├── core.pb.validator.go
            └── core.proto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;api 下有两个子目录，分别对应&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;types (领域模型或者资源)，格式为 &lt;code&gt;group/version/name.proto&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;services (gRPC、http 接口)，格式为 &lt;code&gt;service/version/name.proto&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;包名&#34;&gt;包名&lt;/h2&gt;
&lt;p&gt;包名为应用的标识，用户生成 gRPC 请求路径，或者 proto 文件之间引用。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;建议在 $GOPATH/src 生成代码 proto 代码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;go_package&#34;&gt;go_package&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-protobuf&#34; data-lang=&#34;protobuf&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;option&lt;/span&gt; go_package &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/lack-io/foo/api/types/&amp;lt;group&amp;gt;/&amp;lt;version&amp;gt;;&amp;lt;group&amp;gt;&amp;lt;version&amp;gt;&amp;#34;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;java_package&#34;&gt;java_package&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-protobuf&#34; data-lang=&#34;protobuf&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;option&lt;/span&gt; java_multiple_files &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;;
&lt;span style=&#34;color:#ff79c6&#34;&gt;option&lt;/span&gt; java_package &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;io.vine.services.&amp;lt;group&amp;gt;.&amp;lt;version&amp;gt;&amp;#34;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;import&#34;&gt;import&lt;/h2&gt;
&lt;p&gt;service proto 依赖 types protobuf，以 $GOPATH/src 为更目录引入对应 proto。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-protobuf&#34; data-lang=&#34;protobuf&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/vine-io/foo/api/types/core/v1/core.proto&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Request&lt;/span&gt; {
    corev1.Request req &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;storage&#34;&gt;storage&lt;/h2&gt;
&lt;p&gt;当需要数据持久化时，有 types proto 生成对应的数据库交互代码。详细的说明可以参考 &lt;a href=&#34;https://vine-io.github.io/vine/docs/guides/dao/&#34;&gt;proto-gen-dao&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;代码的存放规则为，&lt;em&gt;谁实现，谁存放&lt;/em&gt;。生成的代码存放在对应服务更目录的 &lt;code&gt;infra/storage&lt;/code&gt; 下，需要在 proto 文件的头部指定生成路径:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-protobuf&#34; data-lang=&#34;protobuf&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// +dao:output=github.com/vine-io/foo/pkg/helloworld/infra/storage;storage
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;syntax &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;protoc&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;命令规范&#34;&gt;命令规范&lt;/h2&gt;
&lt;h3 id=&#34;目录结构-1&#34;&gt;目录结构&lt;/h3&gt;
&lt;p&gt;包名为小写，且同与目录一致: 如 &lt;code&gt;hellowrold/v1/helloworld.proto&lt;/code&gt; 的包名为 &lt;code&gt;helloworldv1&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;文件结构&#34;&gt;文件结构&lt;/h3&gt;
&lt;p&gt;文件应该命名为：lower_snake_case.proto 所有Proto应按下列方式排列:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;License header (if applicable)&lt;/li&gt;
&lt;li&gt;File overview&lt;/li&gt;
&lt;li&gt;Syntax&lt;/li&gt;
&lt;li&gt;Package&lt;/li&gt;
&lt;li&gt;Imports (sorted)&lt;/li&gt;
&lt;li&gt;File options&lt;/li&gt;
&lt;li&gt;Service&lt;/li&gt;
&lt;li&gt;Message&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;service-和-message&#34;&gt;Service 和 Message&lt;/h3&gt;
&lt;p&gt;使用驼峰命名法命名 service, method 和 message。Service 的名称格式为 &lt;code&gt;&amp;lt;PackageName&amp;gt;Service&lt;/code&gt; 以 &lt;code&gt;Service&lt;/code&gt; 为后缀。&lt;/p&gt;
&lt;p&gt;Method 的格式为:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-protobuf&#34; data-lang=&#34;protobuf&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;service&lt;/span&gt; EchoService {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;rpc&lt;/span&gt; EmptyMethod(Empty) &lt;span style=&#34;color:#ff79c6&#34;&gt;returns&lt;/span&gt; (Empty);
    &lt;span style=&#34;color:#ff79c6&#34;&gt;rpc&lt;/span&gt; Echo(EchoReq) &lt;span style=&#34;color:#ff79c6&#34;&gt;returns&lt;/span&gt; (EchoRsp);
}

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Empty&lt;/span&gt; {}

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;EchoReq&lt;/span&gt; {}

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;EchoRsp&lt;/span&gt; {}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Method 的输入输出 Message 没有其他字段时，使用 &lt;code&gt;Empty&lt;/code&gt;。Method 的输入 message 以 &lt;code&gt;Req&lt;/code&gt; 结尾。输出 message 以 &lt;code&gt;Rsp&lt;/code&gt; 结尾。&lt;/p&gt;
&lt;h3 id=&#34;字段&#34;&gt;字段&lt;/h3&gt;
&lt;p&gt;字段使用驼峰命名法(首字母小写)，&lt;code&gt;repeated&lt;/code&gt; 数组类型是结尾加小写:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-protobuf&#34; data-lang=&#34;protobuf&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;User&lt;/span&gt; {
    &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#ff79c6&#34;&gt;repeated&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; tags &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;枚举-enums&#34;&gt;枚举 Enums&lt;/h3&gt;
&lt;p&gt;使用驼峰命名法（首字母大写）命名枚举类型，使用 “大写下划线大写” 的方式命名枚举值：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-protobuf&#34; data-lang=&#34;protobuf&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;enum&lt;/span&gt; Color {
  RED &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
  BLACK &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;每一个枚举值以分号结尾，而非逗号。&lt;/p&gt;
&lt;h3 id=&#34;注释-comment&#34;&gt;注释 Comment&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Service，描述清楚服务的作用&lt;/li&gt;
&lt;li&gt;Method，描述清楚接口的功能特性&lt;/li&gt;
&lt;li&gt;Field，描述清楚字段准确的信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;完整实例&#34;&gt;完整实例&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-protobuf&#34; data-lang=&#34;protobuf&#34;&gt;syntax &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;proto3&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; gpmv1;

&lt;span style=&#34;color:#ff79c6&#34;&gt;option&lt;/span&gt; go_package &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/vine-io/gpm/api/service/gpm/v1;gpmv1&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#ff79c6&#34;&gt;option&lt;/span&gt; java_multiple_files &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;;
&lt;span style=&#34;color:#ff79c6&#34;&gt;option&lt;/span&gt; java_package &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;io.vine.services.gpm.v1&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/vine-io/gpm/api/types/gpm/v1/gpm.proto&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:openapi
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;service&lt;/span&gt; GpmService {
  &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:summary=查询单个服务
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:get=/api/v1/Service/{name}
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;rpc&lt;/span&gt; GetService(GetServiceReq) &lt;span style=&#34;color:#ff79c6&#34;&gt;returns&lt;/span&gt; (GetServiceRsp);
}

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Empty&lt;/span&gt; {}

&lt;span style=&#34;color:#6272a4&#34;&gt;// GetService 请求参数
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;GetServiceReq&lt;/span&gt; {
  &lt;span style=&#34;color:#6272a4&#34;&gt;// 服务名称
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:required
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;
}

&lt;span style=&#34;color:#6272a4&#34;&gt;// GetService 返回结果
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;GetServiceRsp&lt;/span&gt; {
  gpmv1.Service &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;service&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: Vine 工具</title>
      <link>https://vine-io.github.io/vine/docs/guides/vine/</link>
      <pubDate>Fri, 04 Jun 2021 17:08:23 +0800</pubDate>
      
      <guid>https://vine-io.github.io/vine/docs/guides/vine/</guid>
      <description>
        
        
        &lt;h2 id=&#34;安装-vine-工具&#34;&gt;安装 vine 工具&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;go get github.com/vine-io/vine/cmd/vine
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;验证安装结果&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ vine --help
NAME:
   vine - A vine service runtime
        _
 _   __&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;_&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;___  ___
| | / / / __ &lt;span style=&#34;color:#f1fa8c&#34;&gt;\/&lt;/span&gt; _ &lt;span style=&#34;color:#f1fa8c&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&lt;/span&gt;| |/ / / / / /  __/
|___/_/_/ /_/&lt;span style=&#34;color:#f1fa8c&#34;&gt;\_&lt;/span&gt;__/

USAGE:
   vine &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;global options&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;command&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;command&lt;/span&gt; options&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;arguments...&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt;

VERSION:
   ...

COMMANDS:
   api      Run the api gateway
   new      Create vine resource template
   init     Initialize a vine project
   build    Build vine project or resource
   run      Start a vine project
   help, h  Shows a list of commands or &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;help&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; one &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;command&lt;/span&gt;

GLOBAL OPTIONS:
   --help, -h     show &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;help&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;default: &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
   --version, -v  print the version &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;default: &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;vine 命令行工具支持多个子命令，包含以下功能:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;启动网关&lt;/li&gt;
&lt;li&gt;项目管理 (创建，编译，运行)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;vine-项目管理&#34;&gt;vine 项目管理&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;new&lt;/code&gt;, &lt;code&gt;init&lt;/code&gt;, &lt;code&gt;build&lt;/code&gt;, &lt;code&gt;run&lt;/code&gt; 可能帮助开发人员很好的管理 vine 实现的项目。接下来我们使用该工具一步步实现单服务的管理&lt;/p&gt;
&lt;h3 id=&#34;初始化项目&#34;&gt;初始化项目&lt;/h3&gt;
&lt;p&gt;新建目录 &lt;code&gt;$GOPATH/src/example&lt;/code&gt; (建议将项目目录保存在 GOPATH 下。)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ mkdir &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$GOAPTH&lt;/span&gt;/src/example
$ &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$GOPATH&lt;/span&gt;/src/example
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在项目目录下执行初始化操作:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ vine init 
Creating resource  in &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$GOPATH&lt;/span&gt;/src/example

.
├── vine.toml
├── README.md
├── .gitignore
└── go.mod
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;初始化话生成以上文件，&lt;code&gt;vine.toml&lt;/code&gt; 中包含项目相关的信息，包含该文件的目录就会被识别为 &lt;code&gt;vine&lt;/code&gt; 项目。&lt;/p&gt;
&lt;h3 id=&#34;新建服务&#34;&gt;新建服务&lt;/h3&gt;
&lt;p&gt;执行以下命令创建一个服务:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ vine new service 
Creating resource example in &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$GOPATH&lt;/span&gt;/src/example

.
├── cmd
│   └── main.go
├── pkg
│   ├── runtime
│   │   └── doc.go
│   ├── plugin.go
│   ├── app.go
│   ├── server
│   │   └── example.go
│   ├── service
│   │   ├── example.go
│   │   └── wire.go
│   └── dao
│       └── example.go
├── deploy
│   ├── Dockerfile
│   ├── example.ini
│   └── example.service
├── proto
│   └── service
│       └── example
│           └── v1
│               └── example.proto
└── vine.toml


download protoc zip packages &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;protoc-&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$VERSION&lt;/span&gt;-&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$PLATFORM&lt;/span&gt;.zip&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; and install:

visit https://github.com/protocolbuffers/protobuf/releases

download protobuf &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; vine:

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;cd&lt;/span&gt; example

install dependencies:
   go get github.com/google/wire/cmd/wire
	go get github.com/gogo/protobuf
	go get github.com/vine-io/vine/cmd/protoc-gen-gogo
	go get github.com/vine-io/vine/cmd/protoc-gen-vine
	go get github.com/vine-io/vine/cmd/protoc-gen-validator
	go get github.com/vine-io/vine/cmd/protoc-gen-deepcopy
	go get github.com/vine-io/vine/cmd/protoc-gen-dao

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;cd&lt;/span&gt; example
	vine build example
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;安装依赖包&#34;&gt;安装依赖包&lt;/h3&gt;
&lt;p&gt;根据提示，安装依赖&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ go get github.com/google/wire/cmd/wire
$ go get github.com/gogo/protobuf
$ go get github.com/vine-io/vine/cmd/protoc-gen-gogo
$ go get github.com/vine-io/vine/cmd/protoc-gen-vine
$ go get github.com/vine-io/vine/cmd/protoc-gen-validator
$ go get github.com/vine-io/vine/cmd/protoc-gen-deepcopy
$ go get github.com/vine-io/vine/cmd/protoc-gen-dao
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;编译项目&#34;&gt;编译项目&lt;/h3&gt;
&lt;p&gt;生成 &lt;code&gt;*.pb.go&lt;/code&gt; 代码:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ vine build proto --type&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;service  --group&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;example example
change directory &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$GOPATH&lt;/span&gt;/src:
protoc -I&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$GOPATH&lt;/span&gt;/src --gogo_out&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;:. --vine_out&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;:. --validator_out&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;:. example/proto/service/example/v1/example.proto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;编译成二进制文件:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ go mod vendor
go: finding module &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; package github.com/google/wire
go: found github.com/google/wire in github.com/google/wire v0.5.0
$ vine build service example
vine build service example
go build -a -installsuffix cgo -ldflags &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;-s -w&amp;#34;&lt;/span&gt; cmd/main.go
speed: 17.907776483s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;运行服务&#34;&gt;运行服务&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ./main
2021-06-05 08:47:29  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;vine/service.go:199 &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;level&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;info Starting &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;service&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt; go.vine.service.example
2021-06-05 08:47:29  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;vine/service.go:200 &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;level&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;info service &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;version&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt; latest
2021-06-05 08:47:29  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;grpc/grpc.go:878 &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;level&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;info Server &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;grpc&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt; Listening on &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;::&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt;:51530
2021-06-05 08:47:29  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;grpc/grpc.go:719 &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;level&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;info Registry &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;mdns&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt; Registering node: go.vine.service.example-81ec2a02-c402-42d7-88c8-3de75a68a49b
2021-06-05 08:47:29  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;mdns/mdns_registry.go:266 &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;level&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;info &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;mdns&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt; registry create new service with ip: 192.168.11.167 &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt;: 192.168.11.167
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;vine-项目结构&#34;&gt;vine 项目结构&lt;/h2&gt;
&lt;p&gt;vine 项目采用合理的结构，使代码结构变得清晰易理解。项目分成两种类型，&lt;code&gt;cluster&lt;/code&gt; 分布式和 &lt;code&gt;single&lt;/code&gt; 单服务。两种类型的目录结构上有一些区别&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 单服务项目&lt;/span&gt;
.
├── cmd  &lt;span style=&#34;color:#6272a4&#34;&gt;# 服务入口目录, single类型时目录下只有 main.go 文件，cluster 下包含多个服务同名的目录，内部有 main.go 文件&lt;/span&gt;
│   └── main.go
├── pkg  &lt;span style=&#34;color:#6272a4&#34;&gt;# pkg 每个服务核心代码存放下该目录下，single类型时，目录下直接存放服务代码，cluster类型时，目录还有一层服务同名的子目录。&lt;/span&gt;
│   ├── runtime  &lt;span style=&#34;color:#6272a4&#34;&gt;# 各服务公用的工具包和 client 等&lt;/span&gt;
│   │   └── doc.go
│   ├── plugin.go &lt;span style=&#34;color:#6272a4&#34;&gt;# vine 服务的插件信息&lt;/span&gt;
│   ├── app.go    &lt;span style=&#34;color:#6272a4&#34;&gt;# 服务入口，初始化的一些代码&lt;/span&gt;
│   ├── server    &lt;span style=&#34;color:#6272a4&#34;&gt;# 提供 rpc 服务，只进行一些数据的验证，具体工具调用 service&lt;/span&gt;
│   │   └── example.go
│   ├── service   &lt;span style=&#34;color:#6272a4&#34;&gt;# 服务业务逻辑代码&lt;/span&gt;
│   │   ├── example.go
│   │   └── wire.go &lt;span style=&#34;color:#6272a4&#34;&gt;# 使用 github.com/google/wire 实现 DI&lt;/span&gt;
│   └── dao       &lt;span style=&#34;color:#6272a4&#34;&gt;# 数据库交互代码，有 protoc 工具自动生成&lt;/span&gt;
│       └── example.go
├── deploy    &lt;span style=&#34;color:#6272a4&#34;&gt;# 项目代码部署时需要的文件，single 和 cluster 结构上不同&lt;/span&gt;
│   ├── Dockerfile &lt;span style=&#34;color:#6272a4&#34;&gt;# 服务 Dockerfile&lt;/span&gt;
│   ├── example.ini &lt;span style=&#34;color:#6272a4&#34;&gt;# 服务的启动参数配置文件&lt;/span&gt;
│   └── example.service &lt;span style=&#34;color:#6272a4&#34;&gt;# CentOS 上的服务脚本&lt;/span&gt;
├── proto    &lt;span style=&#34;color:#6272a4&#34;&gt;# 存放 *.proto 文件及其生成的 *.go 代码，分成 apis 和 service 类型&lt;/span&gt;
│   └── service &lt;span style=&#34;color:#6272a4&#34;&gt;# 提供 gRPC 服务，引用 proto/apis 下的 message  &lt;/span&gt;
│       └── example &lt;span style=&#34;color:#6272a4&#34;&gt;# 和服务同名的目录&lt;/span&gt;
│           └── v1  &lt;span style=&#34;color:#6272a4&#34;&gt;# 服务接口版本，默认为 v1&lt;/span&gt;
│               └── example.proto
└── vine.toml &lt;span style=&#34;color:#6272a4&#34;&gt;# vine 项目的描述文件，有该文件则被认定为 vine 项目。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;vine.toml&lt;/code&gt; 文件内容说明&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;package&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt;   
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;kind&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;single&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;# 项目类型&lt;/span&gt;
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;namespace&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;go.vine&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;# 项目的命令空间&lt;/span&gt;

&lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;pkg&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;# kind = &amp;#34;single&amp;#34; 该配置存在，描述服务信息。&lt;/span&gt;
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;example&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;# 服务命令&lt;/span&gt;
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;go.vine.service.example&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;# 别名&lt;/span&gt;
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;service&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;# 服务类型,提供 gRPC 接口，service, web, gateway&lt;/span&gt;
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;version&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;latest&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;# 服务版本&lt;/span&gt;
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;cmd/main.go&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;# main 函数路径&lt;/span&gt;
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;dir&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;example&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;# 项目目录路径，$GOPATH/src 下&lt;/span&gt;
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;output&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;# 服务编译时，输入路径 go build -o $output main.go&lt;/span&gt;
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;flags&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;   &lt;span style=&#34;color:#6272a4&#34;&gt;# 服务编译时的额外参数，支持多个格式，&amp;#34;KEY=value&amp;#34;, &amp;#34;-key&amp;#34;, &amp;#34;key=${shell command}&amp;#34;  &lt;/span&gt;
	&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;-a&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;-installsuffix&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;cgo&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;-ldflags \&amp;#34;-s -w\&amp;#34;&amp;#34;&lt;/span&gt;,
&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt;

&lt;span style=&#34;color:#ff79c6&#34;&gt;[[&lt;/span&gt;mod&lt;span style=&#34;color:#ff79c6&#34;&gt;]]&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;# kind = &amp;#34;cluster&amp;#34; 该配置存在，描述服务信息。每个 mod 表示一个服务&lt;/span&gt;
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;apiserver&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;com.howlink.service.apiserver&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;service&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;version&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;latest&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;cmd/apiserver/main.go&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;dir&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;dr/apiserver&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;output&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;_output/apiserver&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;flags&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;
	&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;GOOS=linux&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;GOARCH=amd64&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;-a&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;-installsuffix&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;cgo&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;-ldflags \&amp;#34;-s -w\&amp;#34;&amp;#34;&lt;/span&gt;,
&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt;

&lt;span style=&#34;color:#ff79c6&#34;&gt;[[&lt;/span&gt;proto&lt;span style=&#34;color:#ff79c6&#34;&gt;]]&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;# .proto 文件描述信息&lt;/span&gt;
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;example&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;# 文件名&lt;/span&gt;
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;pb&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;example/proto/service/example/v1/example.proto&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;# 路径&lt;/span&gt;
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;service&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;# 类型，service 和 api&lt;/span&gt;
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;group&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;example&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;# 组，同个 group 下不同有同名的 proto 文件&lt;/span&gt;
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;version&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;v1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;# 版本，默认为 v1&lt;/span&gt;
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;plugins&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;gogo&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;vine&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;validator&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;# 生成 .go 代码时启用的 protoc 插件&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;vine-命令解析&#34;&gt;vine 命令解析&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;vine&lt;/code&gt; 工具支持以下子命令:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;api      启动网关服务&lt;/li&gt;
&lt;li&gt;new      创建服务或者proto文件&lt;/li&gt;
&lt;li&gt;init     初始化项目，将一个目录转化为项目目录&lt;/li&gt;
&lt;li&gt;build    编译服务、生成 .go 文件&lt;/li&gt;
&lt;li&gt;run      运行服务&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;init-子命令&#34;&gt;init 子命令&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;vine init&lt;/code&gt; 支持以下参数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ vine init --help    
NAME:
   vine init - Initialize a vine project

USAGE:
   vine init &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;command&lt;/span&gt; options&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;arguments...&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt;

OPTIONS:
   --namespace string  Namespace &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; the project e.g com.example &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;default: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;go.vine&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;# 指定项目的命令空间&lt;/span&gt;
   --cluster           create cluster package. &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;default: &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;# 确认项目类型，默认为单服务&lt;/span&gt;
   --help, -h          show &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;help&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;default: &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;vine 项目支持 cluster (多服务分布式)、single (单服务，默认) 两种类型。&lt;/p&gt;
&lt;h3 id=&#34;new-子命令&#34;&gt;new 子命令&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ NAME:
   vine new - Create vine resource template

USAGE:
   vine new &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;command&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;command&lt;/span&gt; options&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;arguments...&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt;

COMMANDS:
   service  Create a service template  &lt;span style=&#34;color:#6272a4&#34;&gt;# 创建一个 gRPC 服务&lt;/span&gt;
   gateway  Create a gateway template  &lt;span style=&#34;color:#6272a4&#34;&gt;# 创建一个网关服务&lt;/span&gt;
   web      Create a web template      &lt;span style=&#34;color:#6272a4&#34;&gt;# 创建一个 web 服务&lt;/span&gt;
   proto    Create a proto file        &lt;span style=&#34;color:#6272a4&#34;&gt;# 创建 proto 文件&lt;/span&gt;
   help, h  Shows a list of commands or &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;help&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; one &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;command&lt;/span&gt;

OPTIONS:
   --help, -h     show &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;help&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;default: &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
   --version, -v  print the version &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;default: &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;build-子命令&#34;&gt;build 子命令&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ vine build --help
NAME:
   vine build - Build vine project or resource

USAGE:
   vine build &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;command&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;command&lt;/span&gt; options&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;arguments...&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt;

COMMANDS:
   proto    Generate protobuf file  &lt;span style=&#34;color:#6272a4&#34;&gt;# 生成 proto 对应的go代码&lt;/span&gt;
   service  Build vine project      &lt;span style=&#34;color:#6272a4&#34;&gt;# 编译服务&lt;/span&gt;
   help, h  Shows a list of commands or &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;help&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; one &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;command&lt;/span&gt;

OPTIONS:
   --help, -h     show &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;help&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;default: &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
   --version, -v  print the version &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;default: &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;run-子命令&#34;&gt;run 子命令&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ vine run --help          
NAME:
   vine run - Start a vine project

USAGE:
   vine run &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;command&lt;/span&gt; options&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;arguments...&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt;

OPTIONS:
   --auto-restart   &lt;span style=&#34;color:#6272a4&#34;&gt;# 是否在监听到文件变动时自动重启，默认为 true&lt;/span&gt;
   --watch strings  &lt;span style=&#34;color:#6272a4&#34;&gt;# 监听指定目录的文件内容变化&lt;/span&gt;
   --help, -h       show &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;help&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;default: &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;// TODO&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: protoc-gen-vine</title>
      <link>https://vine-io.github.io/vine/docs/guides/openapi/</link>
      <pubDate>Mon, 25 Jan 2021 18:42:52 +0800</pubDate>
      
      <guid>https://vine-io.github.io/vine/docs/guides/openapi/</guid>
      <description>
        
        
        &lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Vine&lt;/em&gt; 内部集成 openapi3.0，&lt;code&gt;protoc-gen-vine&lt;/code&gt; 通过识别 protobuf 文件的注释生成 Openapi3.0 文档。类似 &lt;a href=&#34;https://vine-io.github.io/vine/docs/tools/validate/&#34;&gt;Validator&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;使用&#34;&gt;使用&lt;/h2&gt;
&lt;h3 id=&#34;1先编写-helloworldproto-文件&#34;&gt;1.先编写 helloworld.proto 文件&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-protobuf&#34; data-lang=&#34;protobuf&#34;&gt;syntax &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;proto3&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; testdata;
&lt;span style=&#34;color:#ff79c6&#34;&gt;option&lt;/span&gt; go_package &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/vine-io/vine/testdata/proto;testdata&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/vine-io/vine/proto/api/api.proto&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:openapi
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:term_name=vine
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:term_email=598223084@qq.com
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:contact_name=vine
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:contact_email=598223084@qq.com
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:license_name=Apache2.0
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:license_url=https://www.apache.org/licenses/LICENSE-2.0
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:external_doc_desc=123
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:external_doc_url=http://www.baidu.com
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;service&lt;/span&gt; Helloworld {
  &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:get=/api/v1/call
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:body=*
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:summary=callllllllll
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:security=bearer, apiKeys, basic
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:result=[200]
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;rpc&lt;/span&gt; Call(HelloWorldRequest) &lt;span style=&#34;color:#ff79c6&#34;&gt;returns&lt;/span&gt; (HelloWorldResponse) {};
  &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:post=/api/v1/event
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:body=*
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;rpc&lt;/span&gt; Mul(api.Event) &lt;span style=&#34;color:#ff79c6&#34;&gt;returns&lt;/span&gt; (HelloWorldResponse) {};
}

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;HelloWorldRequest&lt;/span&gt; {
  &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:required
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;
  &lt;span style=&#34;color:#8be9fd&#34;&gt;int32&lt;/span&gt; age &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;;
}


&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;HelloWorldResponse&lt;/span&gt; {
  &lt;span style=&#34;color:#8be9fd&#34;&gt;int32&lt;/span&gt; code &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;
  &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; reply &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;;
}


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2安装-protoc-gen-vine&#34;&gt;2.安装 protoc-gen-vine&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;go get github.com/vine-io/vine/cmd/protoc-gen-vine
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3生成-swagger-文档&#34;&gt;3.生成 swagger 文档&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;protoc -I&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$GOPATH&lt;/span&gt;/src -I&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$GOPATH&lt;/span&gt;/src/github.com/gogo/googleapis --gogofaster_out&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;plugins&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;grpc:. --vine_out&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;:. proto/helloworld.proto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行完成后生成以下代码:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Swagger OpenAPI 3.0 for Helloworld service
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;NewHelloworldOpenAPI&lt;/span&gt;() &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;registry.OpenAPI {
    &lt;span style=&#34;color:#6272a4&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;4验证&#34;&gt;4.验证&lt;/h3&gt;
&lt;p&gt;生成的 Openapi3.0 文档会自动注册到 &lt;code&gt;Registry&lt;/code&gt; 组件，当启动 &lt;code&gt;vine api&lt;/code&gt; 时添加 &lt;code&gt;--enable-openapi&lt;/code&gt; 参数可以启动 OpenAPI3.0 功能:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;vine api &lt;span style=&#34;color:#ff79c6&#34;&gt;--&lt;/span&gt;handler=rpc &lt;span style=&#34;color:#ff79c6&#34;&gt;--&lt;/span&gt;enable&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;openapi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;启动用访问 url &lt;code&gt;http://127.0.0.1:8080/openapi-ui/&lt;/code&gt; 效果如下:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;2021-01-25-18-58-50.png&#34; alt=&#34;swagger-openapi&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Vine&lt;/em&gt; 的 OpenAPI 支持 swagger 风格和 redoc 风格，切换到 redoc 则使用路径 &lt;code&gt;http://127.0.0.1:8080/openapi-ui/redoc&lt;/code&gt;，效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;2021-01-25-19-04-57.png&#34; alt=&#34;redoc-openapi&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;语法解析&#34;&gt;语法解析&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;protoc-gen-vine&lt;/code&gt; 通过解析 &lt;code&gt;protobuf&lt;/code&gt; 中的注释来生成 OpenAPI3.0 文档。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-protobuf&#34; data-lang=&#34;protobuf&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:openapi
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:term_name=vine
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:term_email=598223084@qq.com
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:contact_name=vine
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:contact_email=598223084@qq.com
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:license_name=Apache2.0
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:license_url=https://www.apache.org/licenses/LICENSE-2.0
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:external_doc_desc=123
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:external_doc_url=http://www.baidu.com
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;service&lt;/span&gt; Helloworld {
  &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:get=/api/v1/call
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:body=*
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:summary=callllllllll
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:security=bearer, apiKeys, basic
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:result=[200]
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;rpc&lt;/span&gt; Call(HelloWorldRequest) &lt;span style=&#34;color:#ff79c6&#34;&gt;returns&lt;/span&gt; (HelloWorldResponse) {};
  &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:post=/api/v1/event
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:body=*
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;rpc&lt;/span&gt; Mul(api.Event) &lt;span style=&#34;color:#ff79c6&#34;&gt;returns&lt;/span&gt; (HelloWorldResponse) {};
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;注: &lt;code&gt;protoc-gen-vine&lt;/code&gt; 和 &lt;code&gt;protoc-gen-validator&lt;/code&gt; 中存在大量重复注释，这样设计的原因是通过一套的注释规则直接生成更多的代码，较少非业务代码的编写。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;语法规则&#34;&gt;语法规则&lt;/h3&gt;
&lt;p&gt;有效的注释有以下的规则:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注释必须以 &lt;code&gt;+gen&lt;/code&gt; 作为开头&lt;/li&gt;
&lt;li&gt;注释的内容必须紧贴对应的字段，中间不能有空行&lt;/li&gt;
&lt;li&gt;支持多行注释，也可以将多行合并成一行，并用 &lt;code&gt;;&lt;/code&gt; 作为分隔符&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注：// 风格的注释会被识别为 openapi3.0 中的 Description 信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;类型支持&#34;&gt;类型支持&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;service&lt;/code&gt; 类型规则:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;openapi（必填）: 生成 openapi 的标识，具有此标识的 Service 才会生成文档&lt;/li&gt;
&lt;li&gt;term_url: 项目团队的 url&lt;/li&gt;
&lt;li&gt;contact_name: 项目作者名称，和 contact_email 配合使用&lt;/li&gt;
&lt;li&gt;contact_email: 项目作者邮箱，和 contact_name 配合使用&lt;/li&gt;
&lt;li&gt;license_name: 项目遵循的许可类型，和 license_url 配合使用&lt;/li&gt;
&lt;li&gt;license_url: 项目遵循的许可 url，和 license_name配合使用&lt;/li&gt;
&lt;li&gt;external_doc_desc: 扩展文档描述，和 external_doc_url 配合使用&lt;/li&gt;
&lt;li&gt;external_doc_url: 扩展文档 url，和 external_doc_url 配合使用&lt;/li&gt;
&lt;li&gt;version: 文档版本，如 1.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-protobuf&#34; data-lang=&#34;protobuf&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:ignore
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;P&lt;/span&gt; {
  &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:openapi
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:term_name=vine
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:term_email=598223084@qq.com
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:contact_name=vine
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:contact_email=598223084@qq.com
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:license_name=Apache2.0
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:license_url=https://www.apache.org/licenses/LICENSE-2.0
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:external_doc_desc=123
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:external_doc_url=http://www.example.com
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;service&lt;/span&gt; HelloWorld {

  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;rpc&lt;/code&gt; 支持的规则:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;get | post | put | patch | delete（必填）: 生成对应的 http method，后面紧接路由信息，如 // +gen:get=/api/v1/call&lt;/li&gt;
&lt;li&gt;body: 指定 Request message 的名称，可以直接使用 &lt;code&gt;*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;summary: 接口的摘要信息&lt;/li&gt;
&lt;li&gt;security: 路由支持的 Authorization。支持 beaer, apiKeys 和 basic&lt;/li&gt;
&lt;li&gt;result: http response code。支持 200，400，401，403，404，405，408，409，500，502，503，504&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注: 使用 +gen:security 时，result 会直接添加 401，403 的内容&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;message&lt;/code&gt; 作为内嵌字段时支持的规则:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;required: 判断该字段是否为 nil。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-protobuf&#34; data-lang=&#34;protobuf&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;service&lt;/span&gt; Helloworld {
  &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:get=/api/v1/call
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:body=*
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:summary=callllllllll
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:security=bearer, apiKeys, basic
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:result=[200]
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;rpc&lt;/span&gt; Call(HelloWorldRequest) &lt;span style=&#34;color:#ff79c6&#34;&gt;returns&lt;/span&gt; (HelloWorldResponse) {};
  &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:post=/api/v1/{name}/{id}
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:body=*
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;rpc&lt;/span&gt; Mul(api.Event) &lt;span style=&#34;color:#ff79c6&#34;&gt;returns&lt;/span&gt; (HelloWorldResponse) {};
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;message&lt;/code&gt; 字段通用的规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;required: 指定字段为必填&lt;/li&gt;
&lt;li&gt;default: 指定字段的默认值&lt;/li&gt;
&lt;li&gt;example: 给定字段的实例&lt;/li&gt;
&lt;li&gt;in: 字段只能在几个值中选择&lt;/li&gt;
&lt;li&gt;enum: 同 in&lt;/li&gt;
&lt;li&gt;ro: 字段为只读&lt;/li&gt;
&lt;li&gt;wo: 字段为只写，和 password 配合使用&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-protobuf&#34; data-lang=&#34;protobuf&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;HelloWorldRequest&lt;/span&gt; {
  &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:required
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:default=&amp;#34;hello&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:example=&amp;#34;hello&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:ro
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:rw
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;
  &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:enum=[1,2,3]
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd&#34;&gt;int32&lt;/span&gt; age &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;string&lt;/code&gt; 类型支持的规则&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;min_len: 指定字段的最小长度&lt;/li&gt;
&lt;li&gt;max_len: 指定字段的最大长度&lt;/li&gt;
&lt;li&gt;email: 邮箱地址格式&lt;/li&gt;
&lt;li&gt;date: 日期格式&lt;a href=&#34;https://tools.ietf.org/html/rfc3339#section-5.6&#34;&gt;RFC 3339, section 5.6&lt;/a&gt;，如 2017-07-21&lt;/li&gt;
&lt;li&gt;date-time: 日期加时间格式&lt;a href=&#34;https://tools.ietf.org/html/rfc3339#section-5.6&#34;&gt;RFC 3339, section 5.6&lt;/a&gt;，如 2017-07-21T17:32:28Z&lt;/li&gt;
&lt;li&gt;password: 密码格式&lt;/li&gt;
&lt;li&gt;byte: 字节格式&lt;/li&gt;
&lt;li&gt;binary: 二进制格式，上传文件使用&lt;/li&gt;
&lt;li&gt;ip: ip 地址格式&lt;/li&gt;
&lt;li&gt;ipv4: ipv4 格式&lt;/li&gt;
&lt;li&gt;ipv6: ipv6 格式&lt;/li&gt;
&lt;li&gt;uuid: uuid v4 格式&lt;/li&gt;
&lt;li&gt;uri: uri 格式&lt;/li&gt;
&lt;li&gt;hostname: 主机名&lt;/li&gt;
&lt;li&gt;pattern: 正则表达式&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-protobuf&#34; data-lang=&#34;protobuf&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;S&lt;/span&gt; {
    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:required
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:default=&amp;#34;hello&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:in=[&amp;#34;1&amp;#34;, &amp;#34;2&amp;#34;, &amp;#34;3&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:enum=[&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:min_len=3
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:min_max=4
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:pattern=`\d+(\w+){3,5}`
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:password
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:email
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:ip
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:ipv4
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:ipv6
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:date
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:date-time
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:bytes
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:binary
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:hostname
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:uuid
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:uri
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; m &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;注: string pattern 最好单独一行，以免和其他规则冲突&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;数字类型的支持，包含 int32, int64, fixed32, fix64, float, double&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lt: 指定字段小于指定值&lt;/li&gt;
&lt;li&gt;lte: 指定字段的小于等于指定值&lt;/li&gt;
&lt;li&gt;gt: 指定字段大于指定值&lt;/li&gt;
&lt;li&gt;gte: 指定字段大于等于指定值&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-protobuf&#34; data-lang=&#34;protobuf&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;S&lt;/span&gt; {
    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:required
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;float&lt;/span&gt; a &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;

    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:default=3.14
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;double&lt;/span&gt; pi &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;

    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:in=[1,2,3]
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:enum=[2,3]
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:not_in=[4,5]
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int32&lt;/span&gt; b &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;;

    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:ge=3
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// +ggen:gte=4
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:lte=9
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:lt=10
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int64&lt;/span&gt; c &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: protoc-gen-validator</title>
      <link>https://vine-io.github.io/vine/docs/guides/validate/</link>
      <pubDate>Mon, 18 Jan 2021 11:11:29 +0800</pubDate>
      
      <guid>https://vine-io.github.io/vine/docs/guides/validate/</guid>
      <description>
        
        
        &lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;
&lt;p&gt;服务运行中，经常需要和其他客户端进行数据交互，验证来自客户端的数据的合法性。但是这些代码编写起来枯燥且易错，&lt;strong&gt;vine&lt;/strong&gt; 提供 &lt;code&gt;protoc-gen-validator&lt;/code&gt; 工具来自动生成结构体 &lt;code&gt;Validate()&lt;/code&gt; 方法，减少一部分代码的手动编写。&lt;/p&gt;
&lt;h2 id=&#34;使用&#34;&gt;使用&lt;/h2&gt;
&lt;h3 id=&#34;1先编写-validatorproto-文件&#34;&gt;1.先编写 validator.proto 文件&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-protobuf&#34; data-lang=&#34;protobuf&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Person&lt;/span&gt; {
  &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:min_len=4
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:max_len=10
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;

  &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:required;gt=10;lt=100
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd&#34;&gt;int32&lt;/span&gt; age &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;;

  &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:required;min_bytes=3;max_bytes=4;
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd&#34;&gt;bytes&lt;/span&gt; any &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;;

  &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:email
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; email &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2安装-protoc-gen-validator&#34;&gt;2.安装 protoc-gen-validator&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;go get github.com/vine-io/vine/cmd/protoc-gen-validator
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3生成-validate-方法&#34;&gt;3.生成 Validate() 方法&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;protoc -I&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$GOPATH&lt;/span&gt;/src --gogo_out&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;:.  --validator_out&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;:. proto/validator.proto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行完成后生成以下代码:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; (m &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;Person) &lt;span style=&#34;color:#50fa7b&#34;&gt;Valdiate&lt;/span&gt;() &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt; {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; m.&lt;span style=&#34;color:#50fa7b&#34;&gt;ValidateE&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
}

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; (m &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;Person) &lt;span style=&#34;color:#50fa7b&#34;&gt;ValidateE&lt;/span&gt;() &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt; {
	errs &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;make&lt;/span&gt;([]&lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;)
	&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;len&lt;/span&gt;(m.Name) &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; !(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;len&lt;/span&gt;(m.Name) &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt;) {
			errs = &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;append&lt;/span&gt;(errs, errors.&lt;span style=&#34;color:#50fa7b&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;field &amp;#39;name&amp;#39; length must less than &amp;#39;4&amp;#39;&amp;#34;&lt;/span&gt;))
		}
		&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; !(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;len&lt;/span&gt;(m.Name) &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;) {
			errs = &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;append&lt;/span&gt;(errs, errors.&lt;span style=&#34;color:#50fa7b&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;field &amp;#39;name&amp;#39; length must great than &amp;#39;10&amp;#39;&amp;#34;&lt;/span&gt;))
		}
	}
	&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;int64&lt;/span&gt;(m.Age) &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; {
		errs = &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;append&lt;/span&gt;(errs, errors.&lt;span style=&#34;color:#50fa7b&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;field &amp;#39;age&amp;#39; is required&amp;#34;&lt;/span&gt;))
	} &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {
		&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; !(m.Age &amp;lt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;) {
			errs = &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;append&lt;/span&gt;(errs, errors.&lt;span style=&#34;color:#50fa7b&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;field &amp;#39;age&amp;#39; must less than &amp;#39;100&amp;#39;&amp;#34;&lt;/span&gt;))
		}
		&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; !(m.Age &amp;gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;) {
			errs = &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;append&lt;/span&gt;(errs, errors.&lt;span style=&#34;color:#50fa7b&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;field &amp;#39;age&amp;#39; must great than &amp;#39;10&amp;#39;&amp;#34;&lt;/span&gt;))
		}
	}
	&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;len&lt;/span&gt;(m.Any) &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; {
		errs = &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;append&lt;/span&gt;(errs, errors.&lt;span style=&#34;color:#50fa7b&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;field &amp;#39;any&amp;#39; is required&amp;#34;&lt;/span&gt;))
	} &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {
		&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; !(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;len&lt;/span&gt;(m.Any) &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;) {
			errs = &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;append&lt;/span&gt;(errs, errors.&lt;span style=&#34;color:#50fa7b&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;field &amp;#39;any&amp;#39; length must less than &amp;#39;3&amp;#39;&amp;#34;&lt;/span&gt;))
		}
		&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; !(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;len&lt;/span&gt;(m.Any) &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt;) {
			errs = &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;append&lt;/span&gt;(errs, errors.&lt;span style=&#34;color:#50fa7b&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;field &amp;#39;any&amp;#39; length must great than &amp;#39;4&amp;#39;&amp;#34;&lt;/span&gt;))
		}
	}
	&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;len&lt;/span&gt;(m.Email) &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; !is.&lt;span style=&#34;color:#50fa7b&#34;&gt;Email&lt;/span&gt;(m.Email) {
			errs = &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;append&lt;/span&gt;(errs, errors.&lt;span style=&#34;color:#50fa7b&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;field &amp;#39;email&amp;#39; is not a valid email&amp;#34;&lt;/span&gt;))
		}
	}
	&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; is.&lt;span style=&#34;color:#50fa7b&#34;&gt;MargeErr&lt;/span&gt;(errs&lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;4验证&#34;&gt;4.验证&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;main&lt;/span&gt;() {
 	p &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; pb.Person{}
	p.Age = &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;
	p.Email = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;11&amp;#34;&lt;/span&gt;
 	err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; p.&lt;span style=&#34;color:#50fa7b&#34;&gt;Validate&lt;/span&gt;()
 	log.&lt;span style=&#34;color:#50fa7b&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;%v\n&amp;#34;&lt;/span&gt;, err)
}
&lt;span style=&#34;color:#6272a4&#34;&gt;// output:  field &amp;#39;age&amp;#39; must great than &amp;#39;10&amp;#39;;field &amp;#39;any&amp;#39; is required;field &amp;#39;email&amp;#39; is not a valid email
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;多个错误时，使用 &lt;code&gt;;&lt;/code&gt; 隔开&lt;/p&gt;
&lt;h2 id=&#34;语法解析&#34;&gt;语法解析&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;protoc-gen-validator&lt;/code&gt; 通过解析 &lt;code&gt;protobuf&lt;/code&gt; 中的注释来生成 &lt;code&gt;Validate()&lt;/code&gt; 规则。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-protobuf&#34; data-lang=&#34;protobuf&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:ignore
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Struct&lt;/span&gt; {
    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:required
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; field1 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;
    
    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:required;email
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:min_len=3
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; field2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;语法规则&#34;&gt;语法规则&lt;/h3&gt;
&lt;p&gt;有效的注释有以下的规则:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注释必须以 &lt;code&gt;+gen&lt;/code&gt; 作为开头&lt;/li&gt;
&lt;li&gt;注释的内容必须紧贴对应的字段，中间不能有空行&lt;/li&gt;
&lt;li&gt;支持多行注释，也可以将多行合并成一行，并用 &lt;code&gt;;&lt;/code&gt; 作为分隔符&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;类型支持&#34;&gt;类型支持&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;message&lt;/code&gt; 类型规则:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ignore: 忽略该 message ，不生成 &lt;code&gt;Validate()&lt;/code&gt; 方法&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-protobuf&#34; data-lang=&#34;protobuf&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:ignore
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;P&lt;/span&gt; {

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;message&lt;/code&gt; 作为内嵌字段时支持的规则:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;required: 判断该字段是否为 nil。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-protobuf&#34; data-lang=&#34;protobuf&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;P&lt;/span&gt; {
    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:required
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    Sub sub &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;
}

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Sub&lt;/span&gt; {

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;注: 在引用外部的 message 时，请确认 message 存在 Validate() 方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;string&lt;/code&gt; 类型支持的规则&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;required: 判断是否为空&lt;/li&gt;
&lt;li&gt;default: 字段为空时指定的默认值，(不可用 required 同时使用)&lt;/li&gt;
&lt;li&gt;in, enum: 判断字段的值是否存在于指定的列表中&lt;/li&gt;
&lt;li&gt;not_in: 判断字段的值是否在指定的列表之外&lt;/li&gt;
&lt;li&gt;min_len: 指定字段的最小长度&lt;/li&gt;
&lt;li&gt;max_len: 指定字段的最大长度&lt;/li&gt;
&lt;li&gt;prefix: 判断字段是否以给定的值为开头&lt;/li&gt;
&lt;li&gt;suffix: 判断字段是否以给定的值为结尾&lt;/li&gt;
&lt;li&gt;contains: 判断字段是否包含给定的值&lt;/li&gt;
&lt;li&gt;pattern: 判断该字段是否为有效的正则表达式&lt;/li&gt;
&lt;li&gt;number: 判断该字段是否为有效数字&lt;/li&gt;
&lt;li&gt;email: 判断该字段是否为有效的邮箱地址&lt;/li&gt;
&lt;li&gt;ip: 判断该字段是否为有效的 ip 地址&lt;/li&gt;
&lt;li&gt;ipv4: 判断该字段是否为有效的 ipv4&lt;/li&gt;
&lt;li&gt;ipv6: 判断该字段是否为有效的 ipv6&lt;/li&gt;
&lt;li&gt;crontab: 判断该字段是否为有效的 crontab 表达式&lt;/li&gt;
&lt;li&gt;uuid: 判断该字段是否为有效的 uuid v4&lt;/li&gt;
&lt;li&gt;uri: 判断该字段是否为有效的 uri&lt;/li&gt;
&lt;li&gt;domain: 判断该字段是否为有效的域名&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-protobuf&#34; data-lang=&#34;protobuf&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;S&lt;/span&gt; {
    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:required
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:default=&amp;#34;hello&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:in=[&amp;#34;1&amp;#34;, &amp;#34;2&amp;#34;, &amp;#34;3&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:enum=[&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:not_in=[&amp;#34;d&amp;#34;, &amp;#34;s&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:min_len=3
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:min_max=4
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:prefix=&amp;#34;http&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:suffix=&amp;#34;.com&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:contains=&amp;#34;www&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:pattern=`\d+(\w+){3,5}`
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:number
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:ip
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:ipv4
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:ipv6
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:crontab
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:uuid
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:uri
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:domain
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; m &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;注: string pattern 最好单独一行，以免和其他规则冲突&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;数字类型的支持，包含 int32, int64, fixed32, fix64, float, double&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;required: 判断是否为 0&lt;/li&gt;
&lt;li&gt;default: 字段为空时指定的默认值，(不可用 required 同时使用)&lt;/li&gt;
&lt;li&gt;in, enum: 判断字段的值是否存在于指定的列表中&lt;/li&gt;
&lt;li&gt;not_in: 判断字段的值是否在指定的列表之外&lt;/li&gt;
&lt;li&gt;lt: 指定字段小于指定值&lt;/li&gt;
&lt;li&gt;lte: 指定字段的小于等于指定值&lt;/li&gt;
&lt;li&gt;gt: 指定字段大于指定值&lt;/li&gt;
&lt;li&gt;gte: 指定字段大于等于指定值&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-protobuf&#34; data-lang=&#34;protobuf&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;S&lt;/span&gt; {
    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:required
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;float&lt;/span&gt; a &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;

    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:default=3.14
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;double&lt;/span&gt; pi &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;

    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:in=[1,2,3]
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:enum=[2,3]
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:not_in=[4,5]
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int32&lt;/span&gt; b &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;;

    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:ge=3
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// +ggen:gte=4
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:lte=9
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:lt=10
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int64&lt;/span&gt; c &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;bytes&lt;/code&gt; 类型的支持:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;required: 判断字段的长度是否为0&lt;/li&gt;
&lt;li&gt;min_bytes: 判断字段的最小字节数是否大于给定值&lt;/li&gt;
&lt;li&gt;max_bytes: 判断字段的最大字节数是否小于给定值&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-protobuf&#34; data-lang=&#34;protobuf&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;S&lt;/span&gt; {
    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:required
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:min_bytes=10
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:min_bytes=1024
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;bytes&lt;/span&gt; any &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;repeated 类型的支持：repeated 类型的字段在 golang 中会被解析成切片。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;required: 判断切片的长度是否为0&lt;/li&gt;
&lt;li&gt;min_len: 判断切片的最小长度是否大于给定值&lt;/li&gt;
&lt;li&gt;max_len: 判断切片的最大长度是否小于给定值&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-protobuf&#34; data-lang=&#34;protobuf&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;S&lt;/span&gt; {
    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:required
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:min_len=3
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:max_len=5
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;repeated&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;内嵌-message&#34;&gt;内嵌 message&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;protoc-gen-validator&lt;/code&gt; 支持解析内嵌 message, 使用 &lt;code&gt;+gen:inline&lt;/code&gt; 可以将子 message 中的字段嵌入该 message。实例如下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-protobuf&#34; data-lang=&#34;protobuf&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Meta&lt;/span&gt; {
  &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:required
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;
  &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:required
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd&#34;&gt;int64&lt;/span&gt; id &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;;
}

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Request&lt;/span&gt; {
  &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:inline
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:required
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  Meta meta &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;
  &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;解析出来的内容如下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-protobuf&#34; data-lang=&#34;protobuf&#34;&gt;
func (m *Meta) Validate() error {
	return m.ValidateE(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
}

func (m *Meta) ValidateE(prefix &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;) error {
	errs &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; make([]error, &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;)
	if len(m.Name) &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; {
		errs &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; append(errs, fmt.Errorf(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;field &amp;#39;%sname&amp;#39; is required&amp;#34;&lt;/span&gt;, prefix))
	}
	if &lt;span style=&#34;color:#8be9fd&#34;&gt;int64&lt;/span&gt;(m.Id) &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; {
		errs &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; append(errs, fmt.Errorf(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;field &amp;#39;%sid&amp;#39; is required&amp;#34;&lt;/span&gt;, prefix))
	}
	return is.MargeErr(errs...)
}

func (m *Request) Validate() error {
	return m.ValidateE(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
}

func (m *Request) ValidateE(prefix &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;) error {
	errs &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; make([]error, &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;)
	if len(m.Name) &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; {
		errs &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; append(errs, fmt.Errorf(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;field &amp;#39;%sname&amp;#39; is required&amp;#34;&lt;/span&gt;, prefix))
	}
	if &lt;span style=&#34;color:#8be9fd&#34;&gt;int64&lt;/span&gt;(m.Id) &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; {
		errs &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; append(errs, fmt.Errorf(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;field &amp;#39;%sid&amp;#39; is required&amp;#34;&lt;/span&gt;, prefix))
	}
	return is.MargeErr(errs...)
}

func (m *Response) Validate() error {
	return m.ValidateE(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
}

func (m *Response) ValidateE(prefix &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;) error {
	errs &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; make([]error, &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;)
	return is.MargeErr(errs...)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: protoc-gen-deepcopy</title>
      <link>https://vine-io.github.io/vine/docs/guides/deepcopy/</link>
      <pubDate>Fri, 27 Aug 2021 09:38:29 +0800</pubDate>
      
      <guid>https://vine-io.github.io/vine/docs/guides/deepcopy/</guid>
      <description>
        
        
        &lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;
&lt;p&gt;protoc-gen-deepcopy 帮助用户生成资源的深拷贝接口，减少用户编写代码。&lt;/p&gt;
&lt;h2 id=&#34;使用&#34;&gt;使用&lt;/h2&gt;
&lt;h3 id=&#34;1先编写-deepcopyproto-文件&#34;&gt;1.先编写 deepcopy.proto 文件&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-protobuf&#34; data-lang=&#34;protobuf&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:deepcopy
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Person&lt;/span&gt; {
  &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;
  &lt;span style=&#34;color:#8be9fd&#34;&gt;bytes&lt;/span&gt; any &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;;
  &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; email &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2安装-protoc-gen-deepcopy&#34;&gt;2.安装 protoc-gen-deepcopy&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;go get github.com/vine-io/vine/cmd/protoc-gen-deepcopy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3生成-validate-方法&#34;&gt;3.生成 Validate() 方法&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;protoc -I&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$GOPATH&lt;/span&gt;/src --gogo_out&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;:.  --deepcopy_out&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;:. proto/deepcopy.proto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行完成后生成以下代码:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// DeepCopyInto is an auto-generated deepcopy function, coping the receiver, writing into out. in must be no-nil.
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; (in &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;Person) &lt;span style=&#34;color:#50fa7b&#34;&gt;DeepCopyInto&lt;/span&gt;(out &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;Person) {
	&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;out = &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;in
}

&lt;span style=&#34;color:#6272a4&#34;&gt;// DeepCopy is an auto-generated deepcopy function, copying the receiver, creating a new Person.
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; (in &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;Person) &lt;span style=&#34;color:#50fa7b&#34;&gt;DeepCopy&lt;/span&gt;() &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;Person {
	&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; in &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;
	}
	out &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;new&lt;/span&gt;(Person)
	in.&lt;span style=&#34;color:#50fa7b&#34;&gt;DeepCopyInto&lt;/span&gt;(out)
	&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; out
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;4验证&#34;&gt;4.验证&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;main&lt;/span&gt;() {
	p &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;helloworld.Person{
		Name:  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Vine&amp;#34;&lt;/span&gt;,
		Any:   []&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;byte&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;),
		Email: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;aa@gmail.com&amp;#34;&lt;/span&gt;,
	}

	fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;%p %v\n&amp;#34;&lt;/span&gt;, p, p)
	pc &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; p.&lt;span style=&#34;color:#50fa7b&#34;&gt;DeepCopy&lt;/span&gt;()
	fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;%p %v\n&amp;#34;&lt;/span&gt;, pc, pc)
}
&lt;span style=&#34;color:#6272a4&#34;&gt;// output:  
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;//  0xc0002ea280 name:&amp;#34;Vine&amp;#34; any:&amp;#34;Hello&amp;#34; email:&amp;#34;aa@gmail.com&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;//  0xc0002ea2c0 name:&amp;#34;Vine&amp;#34; any:&amp;#34;Hello&amp;#34; email:&amp;#34;aa@gmail.com&amp;#34;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;语法解析&#34;&gt;语法解析&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;protoc-gen-deepcopy&lt;/code&gt; 通过解析 &lt;code&gt;protobuf&lt;/code&gt; 中的注释来生成 &lt;code&gt;deepcopy&lt;/code&gt; 接口。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-protobuf&#34; data-lang=&#34;protobuf&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:deepcopy
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Struct&lt;/span&gt; {
    &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; field1 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; field2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;语法规则&#34;&gt;语法规则&lt;/h3&gt;
&lt;p&gt;有效的注释有以下的规则:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注释必须以 &lt;code&gt;+gen&lt;/code&gt; 作为开头&lt;/li&gt;
&lt;li&gt;注释的内容必须紧贴对应的字段，中间不能有空行&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;类型支持&#34;&gt;类型支持&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;message&lt;/code&gt; 类型规则:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;deepcopy: 生成 DeepCopy 方法&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-protobuf&#34; data-lang=&#34;protobuf&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:deepcopy
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;P&lt;/span&gt; {
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: protoc-gen-dao</title>
      <link>https://vine-io.github.io/vine/docs/guides/dao/</link>
      <pubDate>Mon, 18 Jan 2021 11:11:29 +0800</pubDate>
      
      <guid>https://vine-io.github.io/vine/docs/guides/dao/</guid>
      <description>
        
        
        &lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Dao&lt;/code&gt; 是 &lt;strong&gt;Vine&lt;/strong&gt; 框架的数据库交互模块，而&lt;code&gt;protoc-gen-dao&lt;/code&gt;工具则可以通过识别&lt;code&gt;*.proto&lt;/code&gt;来生成对应的数据库交互代码。减少大量重复代码的编写，提高用户效率。&lt;/p&gt;
&lt;h2 id=&#34;使用&#34;&gt;使用&lt;/h2&gt;
&lt;h3 id=&#34;1先编写-userproto-文件&#34;&gt;1.先编写 user.proto 文件&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-protobuf&#34; data-lang=&#34;protobuf&#34;&gt;syntax &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;proto3&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; v1;

&lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:dao
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;User&lt;/span&gt; {
  &lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:pk
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; id &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;

  &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;;

  &lt;span style=&#34;color:#ff79c6&#34;&gt;repeated&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; following &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;;

  map&amp;lt;&lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;&amp;gt; tags &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt;;

  Other other &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;;
}

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Other&lt;/span&gt; {
  &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; k &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;
  &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; v &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2安装-protoc-gen-dao&#34;&gt;2.安装 protoc-gen-dao&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;go get github.com/vine-io/vine/cmd/protoc-gen-dao
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3生成curd代码&#34;&gt;3.生成CURD代码&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;protoc -I&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$GOPATH&lt;/span&gt;/src --gogofaster_out&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;plugins&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;grpc:.  --dao_out&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;:. proto/dao.proto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行完成后生成以下文件:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;-rw-r--r--  &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; lack  staff   7.8K Mar &lt;span style=&#34;color:#bd93f9&#34;&gt;19&lt;/span&gt; 22:26 user.pb.dao.go
-rw-r--r--  &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; lack  staff    20K Mar &lt;span style=&#34;color:#bd93f9&#34;&gt;19&lt;/span&gt; 22:26 user.pb.go
-rw-r--r--  &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; lack  staff   255B Mar &lt;span style=&#34;color:#bd93f9&#34;&gt;18&lt;/span&gt; 23:00 user.proto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;*.pb.dao.go&lt;/code&gt; 中保存着CURD代码。&lt;/p&gt;
&lt;h3 id=&#34;4curd-实例&#34;&gt;4.CURD 实例&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;main&lt;/span&gt;() {
	dao.DefaultDialect = sqlite.&lt;span style=&#34;color:#50fa7b&#34;&gt;NewDialect&lt;/span&gt;(dao.&lt;span style=&#34;color:#50fa7b&#34;&gt;DSN&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;user.db&amp;#34;&lt;/span&gt;), dao.&lt;span style=&#34;color:#50fa7b&#34;&gt;Logger&lt;/span&gt;(logger.Default.&lt;span style=&#34;color:#50fa7b&#34;&gt;LogMode&lt;/span&gt;(logger.Info)))
	dao.DefaultDialect.&lt;span style=&#34;color:#50fa7b&#34;&gt;Init&lt;/span&gt;()

    &lt;span style=&#34;color:#6272a4&#34;&gt;// 注册 Schema, 会在数据库中创建对应的表
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;	v1.&lt;span style=&#34;color:#50fa7b&#34;&gt;RegistryUser&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;v1.User{})

	ctx &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; context.&lt;span style=&#34;color:#50fa7b&#34;&gt;TODO&lt;/span&gt;()
	u &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;v1.User{
		Id: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;,
		Name: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Lack&amp;#34;&lt;/span&gt;,
		Following: []&lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;JJ&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;OO&amp;#34;&lt;/span&gt;},
		Tags: &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;label&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;vv&amp;#34;&lt;/span&gt;},
		Other:     &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;v1.Other{
			K: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;k1&amp;#34;&lt;/span&gt;,
			V: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;v1&amp;#34;&lt;/span&gt;,
		},
	}

	fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Create ==============&amp;gt;&amp;#34;&lt;/span&gt;)
	out, err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; v1.&lt;span style=&#34;color:#50fa7b&#34;&gt;FromUser&lt;/span&gt;(u).&lt;span style=&#34;color:#50fa7b&#34;&gt;Create&lt;/span&gt;(ctx)
	&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {
		log.&lt;span style=&#34;color:#50fa7b&#34;&gt;Fatal&lt;/span&gt;(err)
	}
	fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Println&lt;/span&gt;(out)

	fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Updates ==============&amp;gt;&amp;#34;&lt;/span&gt;)
	out, err = v1.&lt;span style=&#34;color:#50fa7b&#34;&gt;FromUser&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;v1.User{Id: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;, Tags: &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;aa&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;vv&amp;#34;&lt;/span&gt;}}).&lt;span style=&#34;color:#50fa7b&#34;&gt;Updates&lt;/span&gt;(ctx)
	&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {
		log.&lt;span style=&#34;color:#50fa7b&#34;&gt;Fatal&lt;/span&gt;(err)
	}
	fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Println&lt;/span&gt;(out)


	fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;FindAll ==============&amp;gt;&amp;#34;&lt;/span&gt;)
	outs, err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; v1.&lt;span style=&#34;color:#50fa7b&#34;&gt;FromUser&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;v1.User{Tags: &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;aa&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;vv&amp;#34;&lt;/span&gt;}}).&lt;span style=&#34;color:#50fa7b&#34;&gt;FindAll&lt;/span&gt;(ctx)
	&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {
		log.&lt;span style=&#34;color:#50fa7b&#34;&gt;Fatal&lt;/span&gt;(err)
	}
	fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Println&lt;/span&gt;(outs)

	fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;FindOne ==============&amp;gt;&amp;#34;&lt;/span&gt;)
	out, err = v1.&lt;span style=&#34;color:#50fa7b&#34;&gt;FromUser&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;v1.User{Id: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;}).&lt;span style=&#34;color:#50fa7b&#34;&gt;FindOne&lt;/span&gt;(ctx)
	&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {
		log.&lt;span style=&#34;color:#50fa7b&#34;&gt;Fatal&lt;/span&gt;(err)
	}
	fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Println&lt;/span&gt;(outs)

	fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;SoftDelete ==============&amp;gt;&amp;#34;&lt;/span&gt;)
	err = v1.&lt;span style=&#34;color:#50fa7b&#34;&gt;FromUser&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;v1.User{Id: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;}).&lt;span style=&#34;color:#50fa7b&#34;&gt;SoftDelete&lt;/span&gt;(ctx)
	&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {
		log.&lt;span style=&#34;color:#50fa7b&#34;&gt;Fatal&lt;/span&gt;(err)
	}

	fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Delete ==============&amp;gt;&amp;#34;&lt;/span&gt;)
	err = v1.&lt;span style=&#34;color:#50fa7b&#34;&gt;FromUser&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;v1.User{Id: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;}).&lt;span style=&#34;color:#50fa7b&#34;&gt;Delete&lt;/span&gt;(ctx)
	&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#6272a4&#34;&gt;//log.Fatal(err)
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;语法解析&#34;&gt;语法解析&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;protoc-gen-dao&lt;/code&gt; 通过解析 &lt;code&gt;protobuf&lt;/code&gt; 中的注释来生成代码。repeated, map, message 字段会生成新的结构体，在数据库中存储格式为 json。
每个带&lt;code&gt;+dao:generate&lt;/code&gt;注释的 message 会生成 *Schema 结构体，并生成对应的 CURD 方法。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// 注册 User 相应的数据库表
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;RegistryUser&lt;/span&gt;(in &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;User) &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt; 
&lt;span style=&#34;color:#6272a4&#34;&gt;// User =&amp;gt; UserSchema, 忽略空值字段
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;FromUser&lt;/span&gt;(in &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;User) &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;UserSchema 
&lt;span style=&#34;color:#6272a4&#34;&gt;// UserSchema =&amp;gt; User
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; (m &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;UserSchema) &lt;span style=&#34;color:#50fa7b&#34;&gt;ToUser&lt;/span&gt;() &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;User
&lt;span style=&#34;color:#6272a4&#34;&gt;// User 结构体在数据库中的表名
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; (UserSchema) &lt;span style=&#34;color:#50fa7b&#34;&gt;TableName&lt;/span&gt;() &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; 
&lt;span style=&#34;color:#6272a4&#34;&gt;// 主键信息，返回主键名称、值、是否为零值
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; (m UserSchema) &lt;span style=&#34;color:#50fa7b&#34;&gt;PrimaryKey&lt;/span&gt;() (&lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;interface&lt;/span&gt;{}, &lt;span style=&#34;color:#8be9fd&#34;&gt;bool&lt;/span&gt;)
&lt;span style=&#34;color:#6272a4&#34;&gt;// 分页查询，等同 FindAll 和 Count
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; (m &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;UserSchema) &lt;span style=&#34;color:#50fa7b&#34;&gt;FindPage&lt;/span&gt;(ctx context.Context, page, size &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;, exprs &lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt;clause.Expression) ([]&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;User, &lt;span style=&#34;color:#8be9fd&#34;&gt;int64&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt;) 
&lt;span style=&#34;color:#6272a4&#34;&gt;// 查询所有符合的记录
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; (m &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;UserSchema) &lt;span style=&#34;color:#50fa7b&#34;&gt;FindAll&lt;/span&gt;(ctx context.Context, exprs &lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt;clause.Expression) ([]&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;User, &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt;) 
&lt;span style=&#34;color:#6272a4&#34;&gt;// 查询符合的记录总量
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; (m &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;UserSchema) &lt;span style=&#34;color:#50fa7b&#34;&gt;Count&lt;/span&gt;(ctx context.Context, exprs &lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt;clause.Expression) (&lt;span style=&#34;color:#8be9fd&#34;&gt;int64&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt;)
&lt;span style=&#34;color:#6272a4&#34;&gt;// 查询首条符合的记录
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; (m &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;UserSchema) &lt;span style=&#34;color:#50fa7b&#34;&gt;FindOne&lt;/span&gt;(ctx context.Context, exprs &lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt;clause.Expression) (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;User, &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt;)
&lt;span style=&#34;color:#6272a4&#34;&gt;// 插入一条记录
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; (m &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;UserSchema) &lt;span style=&#34;color:#50fa7b&#34;&gt;Create&lt;/span&gt;(ctx context.Context) (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;User, &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt;) 
&lt;span style=&#34;color:#6272a4&#34;&gt;// 更新记录
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; (m &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;UserSchema) &lt;span style=&#34;color:#50fa7b&#34;&gt;Updates&lt;/span&gt;(ctx context.Context) (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;User, &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt;)
&lt;span style=&#34;color:#6272a4&#34;&gt;// 软删除
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; (m &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;UserSchema) &lt;span style=&#34;color:#50fa7b&#34;&gt;Delete&lt;/span&gt;(ctx context.Context, soft) &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;类型转化&#34;&gt;类型转化&lt;/h3&gt;
&lt;p&gt;slice、map、message 自动生成实现 driver.Valuer 接口的类型&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-protobuf&#34; data-lang=&#34;protobuf&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;repeated&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; following &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;生成&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; UserFollowing []&lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;

&lt;span style=&#34;color:#6272a4&#34;&gt;// Value return json value, implement driver.Valuer interface
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; (m UserFollowing) &lt;span style=&#34;color:#50fa7b&#34;&gt;Value&lt;/span&gt;() (driver.Value, &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt;) {
	&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;len&lt;/span&gt;(m) &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;
	}
	b, err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; _go.&lt;span style=&#34;color:#50fa7b&#34;&gt;Marshal&lt;/span&gt;(m)
	&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;string&lt;/span&gt;(b), err
}

&lt;span style=&#34;color:#6272a4&#34;&gt;// Scan scan value into Jsonb, implements sql.Scanner interface
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; (m &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;UserFollowing) &lt;span style=&#34;color:#50fa7b&#34;&gt;Scan&lt;/span&gt;(value &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;interface&lt;/span&gt;{}) &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt; {
	&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; bytes []&lt;span style=&#34;color:#8be9fd&#34;&gt;byte&lt;/span&gt;
	&lt;span style=&#34;color:#ff79c6&#34;&gt;switch&lt;/span&gt; v &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; value.(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt;) {
	&lt;span style=&#34;color:#ff79c6&#34;&gt;case&lt;/span&gt; []&lt;span style=&#34;color:#8be9fd&#34;&gt;byte&lt;/span&gt;:
		bytes = v
	&lt;span style=&#34;color:#ff79c6&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;:
		bytes = []&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;byte&lt;/span&gt;(v)
	&lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt;:
		&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; errors.&lt;span style=&#34;color:#50fa7b&#34;&gt;New&lt;/span&gt;(fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Sprint&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Failed to unmarshal JSONB value:&amp;#34;&lt;/span&gt;, value))
	}

	&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; _go.&lt;span style=&#34;color:#50fa7b&#34;&gt;Unmarshal&lt;/span&gt;(bytes, &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;m)
}

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; (m &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;UserFollowing) &lt;span style=&#34;color:#50fa7b&#34;&gt;DaoDataType&lt;/span&gt;() &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; {
	&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;json&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-protobuf&#34; data-lang=&#34;protobuf&#34;&gt;map&amp;lt;&lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;&amp;gt; tags &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;生成&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; UserTags &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;

&lt;span style=&#34;color:#6272a4&#34;&gt;// Value return json value, implement driver.Valuer interface
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; (m UserTags) &lt;span style=&#34;color:#50fa7b&#34;&gt;Value&lt;/span&gt;() (driver.Value, &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt;) {
	&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;len&lt;/span&gt;(m) &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;
	}
	b, err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; _go.&lt;span style=&#34;color:#50fa7b&#34;&gt;Marshal&lt;/span&gt;(m)
	&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;string&lt;/span&gt;(b), err
}

&lt;span style=&#34;color:#6272a4&#34;&gt;// Scan scan value into Jsonb, implements sql.Scanner interface
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; (m &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;UserTags) &lt;span style=&#34;color:#50fa7b&#34;&gt;Scan&lt;/span&gt;(value &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;interface&lt;/span&gt;{}) &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt; {
	&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; bytes []&lt;span style=&#34;color:#8be9fd&#34;&gt;byte&lt;/span&gt;
	&lt;span style=&#34;color:#ff79c6&#34;&gt;switch&lt;/span&gt; v &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; value.(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt;) {
	&lt;span style=&#34;color:#ff79c6&#34;&gt;case&lt;/span&gt; []&lt;span style=&#34;color:#8be9fd&#34;&gt;byte&lt;/span&gt;:
		bytes = v
	&lt;span style=&#34;color:#ff79c6&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;:
		bytes = []&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;byte&lt;/span&gt;(v)
	&lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt;:
		&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; errors.&lt;span style=&#34;color:#50fa7b&#34;&gt;New&lt;/span&gt;(fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Sprint&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Failed to unmarshal JSONB value:&amp;#34;&lt;/span&gt;, value))
	}

	&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; _go.&lt;span style=&#34;color:#50fa7b&#34;&gt;Unmarshal&lt;/span&gt;(bytes, &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;m)
}

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; (m &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;UserTags) &lt;span style=&#34;color:#50fa7b&#34;&gt;DaoDataType&lt;/span&gt;() &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; {
	&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;json&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-protobuf&#34; data-lang=&#34;protobuf&#34;&gt;Other other &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;生成&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; UserOther Other

&lt;span style=&#34;color:#6272a4&#34;&gt;// Value return json value, implement driver.Valuer interface
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; (m &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;UserOther) &lt;span style=&#34;color:#50fa7b&#34;&gt;Value&lt;/span&gt;() (driver.Value, &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt;) {
	&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; m &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;
	}
	b, err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; _go.&lt;span style=&#34;color:#50fa7b&#34;&gt;Marshal&lt;/span&gt;(m)
	&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;string&lt;/span&gt;(b), err
}

&lt;span style=&#34;color:#6272a4&#34;&gt;// Scan scan value into Jsonb, implements sql.Scanner interface
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; (m &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;UserOther) &lt;span style=&#34;color:#50fa7b&#34;&gt;Scan&lt;/span&gt;(value &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;interface&lt;/span&gt;{}) &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt; {
	&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; bytes []&lt;span style=&#34;color:#8be9fd&#34;&gt;byte&lt;/span&gt;
	&lt;span style=&#34;color:#ff79c6&#34;&gt;switch&lt;/span&gt; v &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; value.(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt;) {
	&lt;span style=&#34;color:#ff79c6&#34;&gt;case&lt;/span&gt; []&lt;span style=&#34;color:#8be9fd&#34;&gt;byte&lt;/span&gt;:
		bytes = v
	&lt;span style=&#34;color:#ff79c6&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;:
		bytes = []&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;byte&lt;/span&gt;(v)
	&lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt;:
		&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; errors.&lt;span style=&#34;color:#50fa7b&#34;&gt;New&lt;/span&gt;(fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Sprint&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Failed to unmarshal JSONB value:&amp;#34;&lt;/span&gt;, value))
	}

	&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; _go.&lt;span style=&#34;color:#50fa7b&#34;&gt;Unmarshal&lt;/span&gt;(bytes, &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;m)
}

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; (m &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;UserOther) &lt;span style=&#34;color:#50fa7b&#34;&gt;DaoDataType&lt;/span&gt;() &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; {
	&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;json&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;json-支持&#34;&gt;JSON 支持&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;protoc-gen-dao&lt;/code&gt; 将 slice、map 和 message 类型的字段转化为JSON格式并存储到数据库中，同时 Dao 支持通过 JSON 来作为查询条件。以下是JSON格式查询的条件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// slice 格式，查询slice包含指定项的记录
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;len&lt;/span&gt;(m.Following) &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; _, item &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;range&lt;/span&gt; m.Following {
			exprs = &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;append&lt;/span&gt;(exprs, dao.DefaultDialect.&lt;span style=&#34;color:#50fa7b&#34;&gt;JSONBuild&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;following&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#50fa7b&#34;&gt;Tx&lt;/span&gt;(tx).&lt;span style=&#34;color:#50fa7b&#34;&gt;Contains&lt;/span&gt;(item))
		}
	}
    &lt;span style=&#34;color:#6272a4&#34;&gt;// map 格式，查询kv符合条件的记录，key 类型必须为 string
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; m.Tags &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; k, v &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;range&lt;/span&gt; m.Tags {
			exprs = &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;append&lt;/span&gt;(exprs, dao.DefaultDialect.&lt;span style=&#34;color:#50fa7b&#34;&gt;JSONBuild&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;tags&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#50fa7b&#34;&gt;Tx&lt;/span&gt;(tx).&lt;span style=&#34;color:#50fa7b&#34;&gt;Equals&lt;/span&gt;(v, k))
		}
	}
    &lt;span style=&#34;color:#6272a4&#34;&gt;// struct 格式，精确查询 JSON 
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// 支持两种方式:
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;//  * 当传入 key 的值为空，查询对应 JSON key 是否存在
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;//  * 当传入 key 为确定值时，查询对应 JSON key 是否等于对应的值
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; m.Other &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; k, v &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;range&lt;/span&gt; dao.&lt;span style=&#34;color:#50fa7b&#34;&gt;FieldPatch&lt;/span&gt;(m.Other) {
			&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; v &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {
				exprs = &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;append&lt;/span&gt;(exprs, dao.DefaultDialect.&lt;span style=&#34;color:#50fa7b&#34;&gt;JSONBuild&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;other&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#50fa7b&#34;&gt;Tx&lt;/span&gt;(tx).&lt;span style=&#34;color:#50fa7b&#34;&gt;HasKeys&lt;/span&gt;(strings.&lt;span style=&#34;color:#50fa7b&#34;&gt;Split&lt;/span&gt;(k, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt;))
			} &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {
				exprs = &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;append&lt;/span&gt;(exprs, dao.DefaultDialect.&lt;span style=&#34;color:#50fa7b&#34;&gt;JSONBuild&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;other&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#50fa7b&#34;&gt;Tx&lt;/span&gt;(tx).&lt;span style=&#34;color:#50fa7b&#34;&gt;Equals&lt;/span&gt;(v, strings.&lt;span style=&#34;color:#50fa7b&#34;&gt;Split&lt;/span&gt;(k, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt;))
			}
		}
	}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;注: 如果默认数据库选择 Sqlite3 时，默认不支持 json_each, json_extract 方法，需要添加 -tags 选项。 &lt;code&gt;go build -tags JSON1 main.go&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;语法规则&#34;&gt;语法规则&lt;/h3&gt;
&lt;p&gt;有效的注释有以下的规则:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注释必须以 &lt;code&gt;+gen&lt;/code&gt; 作为开头&lt;/li&gt;
&lt;li&gt;注释的内容必须紧贴对应的字段，中间不能有空行&lt;/li&gt;
&lt;li&gt;支持多行注释，也可以将多行合并成一行，并用 &lt;code&gt;;&lt;/code&gt; 作为分隔符&lt;/li&gt;
&lt;li&gt;只有带 &lt;code&gt;+gen:dao&lt;/code&gt; 注释的 message 才会生成 CURD 代码&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;语法支持&#34;&gt;语法支持&lt;/h3&gt;
&lt;h4 id=&#34;代码输出路径&#34;&gt;代码输出路径&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;protoc-gen-dao&lt;/code&gt; 支持将CURD代码输出到指定路径&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-protobuf&#34; data-lang=&#34;protobuf&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// +dao:output=github.com/vine-io/vine/testdata/db/dao;dao
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;syntax &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;protoc&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用 &lt;code&gt;+dao:output=&lt;/code&gt;为开头，写在 protobuf 文件头部，指定生成的路径(对应$GOPATH)和生成 package 名称。&lt;/p&gt;
&lt;h4 id=&#34;message-支持&#34;&gt;message 支持&lt;/h4&gt;
&lt;p&gt;message 支持以下注释:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-protobuf&#34; data-lang=&#34;protobuf&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:dao  =&amp;gt; 只有标识该注释的 message 才会生成 CURD 代码
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;field-支持&#34;&gt;field 支持&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-protobuf&#34; data-lang=&#34;protobuf&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:pk   =&amp;gt; 指定字段为主键(必须), 可以是 string 和 数字, 当 int 类型时自增 
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;//              当多个 PK 字段存在时，默认选择第一个。
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// +gen:inline =&amp;gt; 只能用在 message field 中，将 message 的字段直接解析为父 message 的字段
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
  </channel>
</rss>
