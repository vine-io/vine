// MIT License
//
// Copyright (c) 2020 The vine Authors
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

syntax = 'proto3';

package registry;

// Package-wide variables from generator "generated".
option go_package = "github.com/vine-io/vine/core/registry";

// Endpoint is a endpoint provided by a service
message Endpoint {
    string name = 1;

    Value request = 2;

    Value response = 3;

    map<string, string> metadata = 4;
}

// Event is registry event
message Event {
    // Event Id
    string id = 1;

    // type of event
    string type = 2;

    // unix timestamp of event
    int64 timestamp = 3;

    // service entry
    Service service = 4;
}

// Node represents the node the service is on
message Node {
    string id = 1;

    string address = 2;

    int64 port = 3;

    map<string, string> metadata = 4;
}

// Result is returns by the watcher
message Result {
    string action = 1;

    Service service = 2;

    int64 timestamp = 3;
}

// Service represents a vine service
message Service {
    string name = 1;

    string version = 2;

    string namespace = 3;

    map<string, string> metadata = 4;

    repeated Endpoint endpoints = 5;

    repeated Node nodes = 6;

    int64 ttl = 7;
}

// Value is an opaque value for a request or response
message Value {
    string name = 1;

    string type = 2;

    repeated Value values = 3;
}

